#parse("/templates/method_base.vm") {
        RestTemplate restTemplate = clientFactory.getRestTemplate();
        String baseUrl = clientFactory.getBaseUrl();
#if($endpoint.httpMethod == "POST")
## POST
#if($hasReturnType)
        ResponseEntity<$returnTypeName> response = restTemplate.exchange(baseUrl + "$endpoint.url", HttpMethod.POST, new HttpEntity<>(requestObject), $returnTypeNameStr);
        return response.getBody();
#else
        restTemplate.postForEntity(baseUrl + "$endpoint.url", requestObject, Void.class);
#end
#elseif($endpoint.httpMethod == "PUT")
## PUT
#if($hasReturnType)
        ResponseEntity<$returnTypeName> response = restTemplate.exchange(baseUrl + "$endpoint.url", HttpMethod.PUT, new HttpEntity<>(requestObject), $returnTypeNameStr);
        return response.getBody();
#else
        restTemplate.put(baseUrl + "$endpoint.url", requestObject);
#end
#elseif($endpoint.httpMethod == "DELETE")
## DELETE
#if($hasReturnType)
        ResponseEntity<$returnTypeName> response = restTemplate.exchange(baseUrl + "$endpoint.url", HttpMethod.DELETE, null, $returnTypeNameStr);
        return response.getBody();
#else
        restTemplate.delete(baseUrl + "$endpoint.url");
#end
#else
## GET (also default in case method type is missing...)
#if($hasReturnType)
        ResponseEntity<$returnTypeName> response = restTemplate.exchange(baseUrl + "$endpoint.url", HttpMethod.GET, null, $returnTypeNameStr);
        return response.getBody();
#else
        restTemplate.getForEntity(baseUrl + "$endpoint.url", Void.class);
#end
#end
    }
